SET enable_seqscan TO off; --FOR ALL QUERIES

--EASY

1)
BEFORE

EXPLAIN(ANALYZE) SELECT * FROM constellations WHERE square > 600 ORDER BY square;

                                                               QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000001.55..10000000001.58 rows=10 width=280) (actual time=0.064..0.064 rows=12 loops=1)
   Sort Key: square
   Sort Method: quicksort  Memory: 26kB
   ->  Seq Scan on constellations  (cost=10000000000.00..10000000001.39 rows=10 width=280) (actual time=0.039..0.045 rows=12 loops=1)
         Filter: (square > '600'::double precision)
         Rows Removed by Filter: 19
 Planning time: 0.259 ms
 Execution time: 0.105 ms
(8 rows)

OPTIMIZATION

CREATE INDEX ON constellations(square);

                                                                  QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------
 Index Scan using constellations_square_idx on constellations  (cost=0.14..8.31 rows=10 width=280) (actual time=0.032..0.034 rows=12 loops=1)
   Index Cond: (square > '600'::double precision)
 Planning time: 0.759 ms
 Execution time: 0.057 ms
(4 rows)

--planning time has increased and execution time has decreased


2)
BEFORE

EXPLAIN(ANALYZE) SELECT name FROM founders WHERE country = 'Denmark'; 

                                                      QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------
 Seq Scan on founders  (cost=10000000000.00..10000000001.08 rows=1 width=78) (actual time=0.017..0.018 rows=3 loops=1)
   Filter: ((country)::text = 'Denmark'::text)
   Rows Removed by Filter: 3
 Planning time: 0.091 ms
 Execution time: 0.034 ms
(5 rows)

OPTIMIZATION

CREATE INDEX ON founders(country text_pattern_ops);

                                                           QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------
 Index Scan using founders_country_idx on founders  (cost=0.13..8.15 rows=1 width=78) (actual time=0.052..0.054 rows=3 loops=1)
   Index Cond: ((country)::text = 'Denmark'::text)
 Planning time: 0.822 ms
 Execution time: 0.093 ms
(4 rows)

--planning and execution time have increased so it's not effective

3)
BEFORE

EXPLAIN(ANALYZE) SELECT sum(quantity_of_visible_stars) AS quantity_of_visible_stars FROM constellations WHERE id_area = 1;

                                                            QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=10000000001.39..10000000001.40 rows=1 width=8) (actual time=0.049..0.049 rows=1 loops=1)
   ->  Seq Scan on constellations  (cost=10000000000.00..10000000001.39 rows=1 width=4) (actual time=0.038..0.041 rows=3 loops=1)
         Filter: (id_area = 1)
         Rows Removed by Filter: 28
 Planning time: 0.221 ms
 Execution time: 0.093 ms
(6 rows)

OPTIMIZATION 

CREATE INDEX ON constellations(id_area);

                                                                   QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------
 Aggregate  (cost=8.16..8.17 rows=1 width=8) (actual time=0.029..0.029 rows=1 loops=1)
   ->  Index Scan using constellations_id_area_idx on constellations  (cost=0.14..8.15 rows=1 width=4) (actual time=0.019..0.021 rows=3 loops=1)
         Index Cond: (id_area = 1)
 Planning time: 0.198 ms
 Execution time: 0.093 ms
(5 rows)

--planning time has slightly decreased

4)
BEFORE

EXPLAIN(ANALYZE) SELECT name, (max_right_ascension – min_right_ascension) AS right_ascension_diam, (max_declination – min_declination) AS declination_diam 
FROM families ORDER BY right_ascension_diam;

                                                         QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000001.24..10000000001.26 rows=8 width=86) (actual time=0.079..0.081 rows=8 loops=1)
   Sort Key: ((max_right_ascension - min_right_ascension))
   Sort Method: quicksort  Memory: 25kB
   ->  Seq Scan on families  (cost=10000000000.00..10000000001.12 rows=8 width=86) (actual time=0.048..0.052 rows=8 loops=1)
 Planning time: 0.214 ms
 Execution time: 0.130 ms
(6 rows)

--we're not able to create an index for the result of an arithmetic operation



--MEDIUM

1)
BEFORE

EXPLAIN(ANALYZE) SELECT latin_name, quantity_of_visible_stars, brightest_star, square, name AS area_name FROM constellations c JOIN area a
ON ((semisphere = 'South') AND (c.id_area = a.id)) ORDER BY quantity_of_visible_stars DESC;

                                                                  QUERY PLAN
----------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000014.09..10000000014.10 rows=4 width=242) (actual time=0.084..0.085 rows=19 loops=1)
   Sort Key: c.quantity_of_visible_stars DESC
   Sort Method: quicksort  Memory: 26kB
   ->  Nested Loop  (cost=10000000000.13..10000000014.05 rows=4 width=242) (actual time=0.038..0.068 rows=19 loops=1)
         Join Filter: (c.id_area = a.id)
         Rows Removed by Join Filter: 105
         ->  Seq Scan on constellations c  (cost=10000000000.00..10000000001.31 rows=31 width=168) (actual time=0.021..0.023 rows=31 loops=1)
         ->  Materialize  (cost=0.13..12.28 rows=1 width=82) (actual time=0.000..0.001 rows=4 loops=31)
               ->  Index Scan using area_pkey on area a  (cost=0.13..12.27 rows=1 width=82) (actual time=0.011..0.012 rows=4 loops=1)
                     Filter: ((semisphere)::text = 'South'::text)
                     Rows Removed by Filter: 4
 Planning time: 0.285 ms
 Execution time: 0.126 ms
(13 rows)

OPTIMIZATION 

CREATE INDEX ON constellations(quantity_of_visible_stars);
CREATE INDEX ON area(semisphere text_pattern_ops);
CREATE INDEX ON constellations(id_area);
//also using index area_pkey

                                                                        QUERY PLAN
-----------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=16.36..16.37 rows=4 width=242) (actual time=0.083..0.084 rows=19 loops=1)
   Sort Key: c.quantity_of_visible_stars DESC
   Sort Method: quicksort  Memory: 26kB
   ->  Nested Loop  (cost=0.27..16.32 rows=4 width=242) (actual time=0.052..0.068 rows=19 loops=1)
         ->  Index Scan using area_semisphere_idx on area a  (cost=0.13..8.15 rows=1 width=82) (actual time=0.027..0.028 rows=4 loops=1)
               Index Cond: ((semisphere)::text = 'South'::text)
         ->  Index Scan using constellations_id_area_idx on constellations c  (cost=0.14..8.15 rows=1 width=168) (actual time=0.007..0.008 rows=5 loops=4)
               Index Cond: (id_area = a.id)
 Planning time: 1.517 ms
 Execution time: 0.142 ms
(10 rows)

--planning and execution time have increased so it's not effective


2)
BEFORE

EXPLAIN(ANALYZE) SELECT f.name AS family, sum(c.square) AS family_square FROM families f JOIN constellations c ON (f.id = c.id_family) GROUP BY f.id ORDER BY family_square DESC;

                                                                       QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000014.94..10000000014.96 rows=8 width=86) (actual time=0.086..0.086 rows=8 loops=1)
   Sort Key: (sum(c.square)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=10000000002.21..10000000014.82 rows=8 width=86) (actual time=0.058..0.073 rows=8 loops=1)
         Group Key: f.id
         ->  Merge Join  (cost=10000000002.21..10000000014.59 rows=31 width=86) (actual time=0.052..0.062 rows=31 loops=1)
               Merge Cond: (f.id = c.id_family)
               ->  Index Scan using families_pkey on families f  (cost=0.13..12.25 rows=8 width=82) (actual time=0.010..0.012 rows=8 loops=1)
               ->  Sort  (cost=10000000002.08..10000000002.16 rows=31 width=8) (actual time=0.038..0.040 rows=31 loops=1)
                     Sort Key: c.id_family
                     Sort Method: quicksort  Memory: 26kB
                     ->  Seq Scan on constellations c  (cost=10000000000.00..10000000001.31 rows=31 width=8) (actual time=0.022..0.026 rows=31 loops=1)
 Planning time: 0.261 ms
 Execution time: 0.137 ms
(14 rows)

OPTIMIZATION

CREATE INDEX ON constellations(id_family);
//also using index family_pkey

                                                                             QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=25.39..25.41 rows=8 width=86) (actual time=0.183..0.184 rows=8 loops=1)
   Sort Key: (sum(c.square)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=0.27..25.27 rows=8 width=86) (actual time=0.129..0.158 rows=8 loops=1)
         Group Key: f.id
         ->  Merge Join  (cost=0.27..25.03 rows=31 width=86) (actual time=0.097..0.125 rows=31 loops=1)
               Merge Cond: (f.id = c.id_family)
               ->  Index Scan using families_pkey on families f  (cost=0.13..12.25 rows=8 width=82) (actual time=0.011..0.015 rows=8 loops=1)
               ->  Index Scan using constellations_id_family_idx on constellations c  (cost=0.14..12.60 rows=31 width=8) (actual time=0.077..0.085 rows=31 loops=1)
 Planning time: 1.383 ms
 Execution time: 0.268 ms
(11 rows)

--planning and execution time have increased so it's not effective


3)
BEFORE

DROP INDEX constellations_id_family_idx;

EXPLAIN(ANALYZE) SELECT f.id, f.name AS family, count(*) AS amount_of_constellations_in_family FROM families f JOIN constellations c 
ON f.id=c.id_family GROUP BY f.id ORDER BY amount_of_constellations_in_family DESC; 

                                                                       QUERY PLAN
--------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=10000000014.94..10000000014.96 rows=8 width=90) (actual time=0.074..0.074 rows=8 loops=1)
   Sort Key: (count(*)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=10000000002.21..10000000014.82 rows=8 width=90) (actual time=0.053..0.066 rows=8 loops=1)
         Group Key: f.id
         ->  Merge Join  (cost=10000000002.21..10000000014.59 rows=31 width=82) (actual time=0.045..0.056 rows=31 loops=1)
               Merge Cond: (f.id = c.id_family)
               ->  Index Scan using families_pkey on families f  (cost=0.13..12.25 rows=8 width=82) (actual time=0.007..0.009 rows=8 loops=1)
               ->  Sort  (cost=10000000002.08..10000000002.16 rows=31 width=4) (actual time=0.035..0.038 rows=31 loops=1)
                     Sort Key: c.id_family
                     Sort Method: quicksort  Memory: 26kB
                     ->  Seq Scan on constellations c  (cost=10000000000.00..10000000001.31 rows=31 width=4) (actual time=0.016..0.020 rows=31 loops=1)
 Planning time: 0.217 ms
 Execution time: 0.130 ms
(14 rows)

OPTIMIZATION

CREATE INDEX ON constellations(id_family);
//also using index families_pkey

                                                                               QUERY PLAN
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Sort  (cost=25.39..25.41 rows=8 width=90) (actual time=0.170..0.170 rows=8 loops=1)
   Sort Key: (count(*)) DESC
   Sort Method: quicksort  Memory: 25kB
   ->  GroupAggregate  (cost=0.27..25.27 rows=8 width=90) (actual time=0.144..0.160 rows=8 loops=1)
         Group Key: f.id
         ->  Merge Join  (cost=0.27..25.03 rows=31 width=82) (actual time=0.137..0.151 rows=31 loops=1)
               Merge Cond: (f.id = c.id_family)
               ->  Index Scan using families_pkey on families f  (cost=0.13..12.25 rows=8 width=82) (actual time=0.005..0.006 rows=8 loops=1)
               ->  Index Only Scan using constellations_id_family_idx on constellations c  (cost=0.14..12.60 rows=31 width=4) (actual time=0.128..0.135 rows=31 loops=1)
                     Heap Fetches: 31
 Planning time: 0.643 ms
 Execution time: 0.212 ms
(12 rows)

--planning and execution time have increased so it's not effective